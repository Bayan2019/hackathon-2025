// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: reports.sql

package database

import (
	"context"
)

const createReport = `-- name: CreateReport :one
INSERT INTO reports(description, location, date)
VALUES (?, ?, ?)
RETURNING id
`

type CreateReportParams struct {
	Description string
	Location    string
	Date        string
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createReport, arg.Description, arg.Location, arg.Date)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteReport = `-- name: DeleteReport :exec

DELETE FROM reports WHERE id = ?
`

func (q *Queries) DeleteReport(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReport, id)
	return err
}

const getReportById = `-- name: GetReportById :one

SELECT id, created_at, updated_at, description, location, date FROM reports WHERE id = ?
`

func (q *Queries) GetReportById(ctx context.Context, id int64) (Report, error) {
	row := q.db.QueryRowContext(ctx, getReportById, id)
	var i Report
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Location,
		&i.Date,
	)
	return i, err
}

const getReports = `-- name: GetReports :many

SELECT id, created_at, updated_at, description, location, date FROM reports
`

func (q *Queries) GetReports(ctx context.Context) ([]Report, error) {
	rows, err := q.db.QueryContext(ctx, getReports)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Report
	for rows.Next() {
		var i Report
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Location,
			&i.Date,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReport = `-- name: UpdateReport :exec

UPDATE reports
SET updated_at = CURRENT_TIMESTAMP,
    date = ?,
    description = ?,
    location = ?
WHERE id = ?
`

type UpdateReportParams struct {
	Date        string
	Description string
	Location    string
	ID          int64
}

func (q *Queries) UpdateReport(ctx context.Context, arg UpdateReportParams) error {
	_, err := q.db.ExecContext(ctx, updateReport,
		arg.Date,
		arg.Description,
		arg.Location,
		arg.ID,
	)
	return err
}
