// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: centers.sql

package database

import (
	"context"
)

const createCenter = `-- name: CreateCenter :one

INSERT INTO centers(address)
VALUES (?)
RETURNING id
`

func (q *Queries) CreateCenter(ctx context.Context, address string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createCenter, address)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteCenter = `-- name: DeleteCenter :exec

DELETE FROM centers WHERE id = ?
`

func (q *Queries) DeleteCenter(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCenter, id)
	return err
}

const getCenterById = `-- name: GetCenterById :one

SELECT id, address FROM centers WHERE id = ?
`

func (q *Queries) GetCenterById(ctx context.Context, id int64) (Center, error) {
	row := q.db.QueryRowContext(ctx, getCenterById, id)
	var i Center
	err := row.Scan(&i.ID, &i.Address)
	return i, err
}

const getCenters = `-- name: GetCenters :many
SELECT id, address FROM centers
`

func (q *Queries) GetCenters(ctx context.Context) ([]Center, error) {
	rows, err := q.db.QueryContext(ctx, getCenters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Center
	for rows.Next() {
		var i Center
		if err := rows.Scan(&i.ID, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCenter = `-- name: UpdateCenter :exec

UPDATE centers 
SET address = ? 
WHERE id = ?
`

type UpdateCenterParams struct {
	Address string
	ID      int64
}

func (q *Queries) UpdateCenter(ctx context.Context, arg UpdateCenterParams) error {
	_, err := q.db.ExecContext(ctx, updateCenter, arg.Address, arg.ID)
	return err
}
