// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: operators.sql

package database

import (
	"context"
)

const createOperator = `-- name: CreateOperator :one
INSERT INTO operators(end_at, police_id, center_id)
VALUES (?, ?, ?)
RETURNING id
`

type CreateOperatorParams struct {
	EndAt    string
	PoliceID int64
	CenterID int64
}

func (q *Queries) CreateOperator(ctx context.Context, arg CreateOperatorParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createOperator, arg.EndAt, arg.PoliceID, arg.CenterID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getCurrentOperators = `-- name: GetCurrentOperators :many

SELECT id, begin_at, end_at, police_id, center_id FROM operators
WHERE end_at > CURRENT_TIMESTAMP AND
    begin_at < CURRENT_TIMESTAMP
`

func (q *Queries) GetCurrentOperators(ctx context.Context) ([]Operator, error) {
	rows, err := q.db.QueryContext(ctx, getCurrentOperators)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Operator
	for rows.Next() {
		var i Operator
		if err := rows.Scan(
			&i.ID,
			&i.BeginAt,
			&i.EndAt,
			&i.PoliceID,
			&i.CenterID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOperatorsOfCenter = `-- name: GetOperatorsOfCenter :many

SELECT id, begin_at, end_at, police_id, center_id FROM operators
WHERE end_at > CURRENT_TIMESTAMP AND
    begin_at < CURRENT_TIMESTAMP AND
    center_id = ?
`

func (q *Queries) GetOperatorsOfCenter(ctx context.Context, centerID int64) ([]Operator, error) {
	rows, err := q.db.QueryContext(ctx, getOperatorsOfCenter, centerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Operator
	for rows.Next() {
		var i Operator
		if err := rows.Scan(
			&i.ID,
			&i.BeginAt,
			&i.EndAt,
			&i.PoliceID,
			&i.CenterID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
