// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: notifications.sql

package database

import (
	"context"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications(note)
VALUES (?)
RETURNING id
`

func (q *Queries) CreateNotification(ctx context.Context, note string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createNotification, note)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteNotification = `-- name: DeleteNotification :exec

DELETE FROM reports WHERE id = ?
`

func (q *Queries) DeleteNotification(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNotification, id)
	return err
}

const getNotificationById = `-- name: GetNotificationById :one

SELECT id, created_at, updated_at, note FROM notifications WHERE id = ?
`

func (q *Queries) GetNotificationById(ctx context.Context, id int64) (Notification, error) {
	row := q.db.QueryRowContext(ctx, getNotificationById, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Note,
	)
	return i, err
}

const getNotifications = `-- name: GetNotifications :many

SELECT id, created_at, updated_at, note FROM notifications
`

func (q *Queries) GetNotifications(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNotification = `-- name: UpdateNotification :exec

UPDATE notifications
SET updated_at = CURRENT_TIMESTAMP,
    note = ?
WHERE id = ?
`

type UpdateNotificationParams struct {
	Note string
	ID   int64
}

func (q *Queries) UpdateNotification(ctx context.Context, arg UpdateNotificationParams) error {
	_, err := q.db.ExecContext(ctx, updateNotification, arg.Note, arg.ID)
	return err
}
