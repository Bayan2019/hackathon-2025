// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: communications.sql

package database

import (
	"context"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO communications(from_id, to_id, message)
VALUES (?, ?, ?)
RETURNING id
`

type CreateMessageParams struct {
	FromID  int64
	ToID    int64
	Message string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.FromID, arg.ToID, arg.Message)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createMessageSOS = `-- name: CreateMessageSOS :one

INSERT INTO communications(from_id, to_id, message, type)
VALUES (?, ?, ?, 'SOS')
RETURNING id
`

type CreateMessageSOSParams struct {
	FromID  int64
	ToID    int64
	Message string
}

func (q *Queries) CreateMessageSOS(ctx context.Context, arg CreateMessageSOSParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createMessageSOS, arg.FromID, arg.ToID, arg.Message)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteMessage = `-- name: DeleteMessage :exec

DELETE FROM communications WHERE id = ?
`

func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}
