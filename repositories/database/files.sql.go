// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: files.sql

package database

import (
	"context"
)

const createFile = `-- name: CreateFile :exec

INSERT INTO files(id)
VALUES (?)
`

func (q *Queries) CreateFile(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, createFile, id)
	return err
}

const deleteFile = `-- name: DeleteFile :exec

DELETE FROM files WHERE id = ?
`

func (q *Queries) DeleteFile(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteFile, id)
	return err
}

const getFileById = `-- name: GetFileById :one

SELECT id, created_at, updated_at FROM files WHERE id = ?
`

func (q *Queries) GetFileById(ctx context.Context, id string) (File, error) {
	row := q.db.QueryRowContext(ctx, getFileById, id)
	var i File
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const getFiles = `-- name: GetFiles :many
SELECT id, created_at, updated_at FROM files
`

func (q *Queries) GetFiles(ctx context.Context) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFilesOfReport = `-- name: GetFilesOfReport :many

SELECT f.id, f.created_at, f.updated_at
FROM files AS f
JOIN files_reports AS fr
ON f.id = fr.file_id
WHERE fr.report_id = ?
`

func (q *Queries) GetFilesOfReport(ctx context.Context, reportID int64) ([]File, error) {
	rows, err := q.db.QueryContext(ctx, getFilesOfReport, reportID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []File
	for rows.Next() {
		var i File
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFile = `-- name: UpdateFile :exec

UPDATE files
SET updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) UpdateFile(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, updateFile, id)
	return err
}
